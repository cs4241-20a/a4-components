{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cvkit\\\\OneDrive\\\\Documents\\\\React\\\\todo-webware\\\\react-app\\\\src\\\\App.js\";\nimport React from 'react';\nimport './App.css';\n\nclass Dream extends React.Component {\n  // our .render() method creates a block of HTML using the .jsx format\n  render() {\n    return /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 7,\n        columnNumber: 12\n      }\n    }, this.props.dream, \" :\", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"checkbox\",\n      name: this.props.dream,\n      onChange: e => this.change(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 7\n      }\n    }));\n  } // call this method when the checkbox for this component is clicked\n\n\n  change(e) {\n    this.props.onclick(this.props.name, e.target.checked);\n  }\n\n} // main component\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props); // initialize our state\n\n    this.state = {\n      dreams: []\n    };\n    this.load();\n  } // load in our data from the server\n\n\n  load() {\n    fetch(\"/dreams\").then(response => response.json()) // parse the JSON from the server\n    .then(data => {\n      this.setState({\n        dreams: data\n      });\n    });\n  } // when an Todo is deleted, send data to server\n\n\n  delete(name, completed) {\n    fetch('/change', {\n      method: 'DELETE',\n      body: JSON.stringify({\n        name,\n        completed\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n  } // add a new todo list\n\n\n  add(evt) {\n    const value = document.querySelector('input').value;\n    fetch('/add', {\n      method: 'POST',\n      body: JSON.stringify({\n        dream: value\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).then(json => {\n      console.log('responds dream:' + json.dream);\n      this.setState({\n        dream: json\n      });\n    });\n  } // render component HTML using JSX \n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"link\", {\n      rel: \"stylesheet\",\n      href: \"https://cdn.jsdelivr.net/npm/water.css@2/out/dark.css\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: e => this.add(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 28\n      }\n    }, \"add\"), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }\n    }, this.state.dreams.map((dream, i) => {\n      /*#__PURE__*/\n      React.createElement(Dream, {\n        key: i,\n        name: dream.dream,\n        onclick: this.delete,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }\n      });\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/cvkit/OneDrive/Documents/React/todo-webware/react-app/src/App.js"],"names":["React","Dream","Component","render","props","dream","e","change","onclick","name","target","checked","App","constructor","state","dreams","load","fetch","then","response","json","data","setState","delete","completed","method","body","JSON","stringify","headers","add","evt","value","document","querySelector","console","log","map","i"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass Dream extends React.Component {\n  // our .render() method creates a block of HTML using the .jsx format\n  render() {\n    return <li>{this.props.dream} : \n      <input type=\"checkbox\" name={this.props.dream} onChange={ e => this.change(e) }/>\n    </li>\n  }\n  // call this method when the checkbox for this component is clicked\n  change(e) {\n    this.props.onclick( this.props.name, e.target.checked )\n  }\n}\n\n// main component\nclass App extends React.Component {\n  constructor( props ) {\n    super( props )\n    // initialize our state\n    this.state = { dreams:[] }\n    this.load()\n  }\n\n// load in our data from the server\nload() {\n  fetch(\"/dreams\")\n  .then(response => response.json())\n  // parse the JSON from the server\n  .then(data => {\n    this.setState({ dreams:data }) \n  });\n}\n\n  // when an Todo is deleted, send data to server\n  delete( name, completed ) {\n    fetch( '/change', {\n      method:'DELETE',\n      body: JSON.stringify({ name, completed }),\n      headers: { 'Content-Type': 'application/json' }\n    })\n  }\n  \n  // add a new todo list\n  add( evt ) {\n    const value = document.querySelector('input').value\n    fetch( '/add', { \n      method:'POST',\n      body: JSON.stringify({ dream: value}),\n      headers: { 'Content-Type': 'application/json' }\n    })\n    .then( response => response.json() )\n    .then( json => {\n        console.log('responds dream:' + json.dream)\n        this.setState({ dream: json }) \n    })\n  }\n  // render component HTML using JSX \n  render() {\n    return (\n      \n      <div className=\"App\">\n        <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/water.css@2/out/dark.css\"></link>\n      <input type='text' /><button onClick={ e => this.add( e )}>add</button>\n        <ul>\n          { this.state.dreams.map( (dream,i) => {\n            \n          <Dream key={i} name={dream.dream} onclick={ this.delete } /> }) }\n       </ul> \n      </div>\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}