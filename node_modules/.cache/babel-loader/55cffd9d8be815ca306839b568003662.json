{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cvkit\\\\OneDrive\\\\Documents\\\\React\\\\todo-webware\\\\react-app\\\\src\\\\App.js\";\nimport React from 'react';\nimport './App.css';\n\nclass Todo extends React.Component {\n  // our .render() method creates a block of HTML using the .jsx format\n  render() {\n    return /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 7,\n        columnNumber: 12\n      }\n    }, this.props.name, \" :\", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"checkbox\",\n      defaultChecked: this.props.completed,\n      name2: this.props.name,\n      onChange: e => this.change(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 7\n      }\n    }));\n  } // call this method when the checkbox for this component is clicked\n\n\n  change(e) {\n    this.props.onclick(this.props.name, e.target.checked);\n  }\n\n} // main component\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props); // initialize our state\n\n    this.state = {\n      todos: []\n    };\n    this.load();\n  } // load in our data from the server\n\n\n  load() {\n    fetch(\"/dreams\").then(response => response.json()) // parse the JSON from the server\n    .then(data => {\n      console.log(\"Data: \" + data);\n      this.setState({\n        todos: data\n      });\n    });\n  } // when an Todo is toggled, send data to server\n\n\n  toggle(name, completed) {\n    fetch('/change', {\n      method: 'POST',\n      body: JSON.stringify({\n        name,\n        completed\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n  } // add a new todo list\n\n\n  add(evt) {\n    const value = document.querySelector('input').value;\n    fetch('/add', {\n      method: 'POST',\n      body: JSON.stringify({\n        dream: value\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).then(json => {\n      console.log('responds dream:' + json.dream);\n      this.setState({\n        todos: json\n      });\n    });\n  } // render component HTML using JSX \n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"link\", {\n      rel: \"stylesheet\",\n      href: \"https://cdn.jsdelivr.net/npm/water.css@2/out/dark.css\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: e => this.add(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 28\n      }\n    }, \"add\"), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }\n    }, this.state.todos.map((todo, i) => /*#__PURE__*/React.createElement(Todo, {\n      key: i,\n      name: todo.name,\n      completed: todo.completed,\n      onclick: this.toggle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 47\n      }\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/cvkit/OneDrive/Documents/React/todo-webware/react-app/src/App.js"],"names":["React","Todo","Component","render","props","name","completed","e","change","onclick","target","checked","App","constructor","state","todos","load","fetch","then","response","json","data","console","log","setState","toggle","method","body","JSON","stringify","headers","add","evt","value","document","querySelector","dream","map","todo","i"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass Todo extends React.Component {\n  // our .render() method creates a block of HTML using the .jsx format\n  render() {\n    return <li>{this.props.name} : \n      <input type=\"checkbox\" defaultChecked={this.props.completed} name2={this.props.name} onChange={ e => this.change(e) }/>\n    </li>\n  }\n  // call this method when the checkbox for this component is clicked\n  change(e) {\n    this.props.onclick( this.props.name, e.target.checked )\n  }\n}\n\n// main component\nclass App extends React.Component {\n  constructor( props ) {\n    super( props )\n    // initialize our state\n    this.state = { todos:[] }\n    this.load()\n  }\n\n// load in our data from the server\nload() {\n  fetch(\"/dreams\")\n  .then(response => response.json())\n  // parse the JSON from the server\n  .then(data => {\n    console.log(\"Data: \" + data)\n    this.setState({ todos:data }) \n  });\n}\n\n  // when an Todo is toggled, send data to server\n  toggle( name, completed ) {\n    fetch( '/change', {\n      method:'POST',\n      body: JSON.stringify({ name, completed }),\n      headers: { 'Content-Type': 'application/json' }\n    })\n  }\n  \n  // add a new todo list\n  add( evt ) {\n    const value = document.querySelector('input').value\n    fetch( '/add', { \n      method:'POST',\n      body: JSON.stringify({ dream:value}),\n      headers: { 'Content-Type': 'application/json' }\n    })\n    .then( response => response.json() )\n    .then( json => {\n        console.log('responds dream:' + json.dream)\n        this.setState({ todos:json }) \n    })\n  }\n  // render component HTML using JSX \n  render() {\n    return (\n      \n      <div className=\"App\">\n        <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/water.css@2/out/dark.css\"></link>\n      <input type='text' /><button onClick={ e => this.add( e )}>add</button>\n        <ul>\n          { this.state.todos.map( (todo,i) => <Todo key={i} name={todo.name} completed={todo.completed} onclick={ this.toggle } /> ) }\n       </ul> \n      </div>\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}