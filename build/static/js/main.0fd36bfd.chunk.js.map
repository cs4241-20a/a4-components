{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","LoginForm","React","Component","props","handleChange","e","setState","target","name","value","handleClick","preventDefault","state","input_username","trim","input_password","alert","json","userName","password","body","JSON","stringify","fetch","method","headers","then","res","status","loginCallback","class","type","placeholder","onChange","id","onClick","Creature","moveCreature","dir","movedir","getAttribute","order","response","resjson","getAllCallback","removeCreature","delete","_id","classList","contains","this","num","hp","ac","className","App","load","creatures","switchRoll","bonus","initbonusBox","current","init","initiativeBox","checked","style","display","updateCreatures","newCreatures","submit","input_name","input_ac","input_initiative","input_hp","window","checkbox","console","log","parseInt","getRandomInt","processJSON","max","Math","floor","random","login","loginBox","appBox","createRef","input_should_roll","ref","diaplay","map","creature","i","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0fd36bfd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport FontAwesome from 'react-fontawesome'\nimport 'font-awesome/css/font-awesome.min.css';\nimport { LOADIPHLPAPI } from 'dns';\nimport P from 'pino';\n\nclass CreatureForm extends React.Component {\n  render() {\n    return(\n      <h1>Form</h1>\n    )\n  }\n\n}\n\nclass LoginForm extends React.Component {\n  constructor(props) {\n    super( props)\n    this.state = {\n      input_password:\"\",\n      input_username:\"\",\n    }\n  }\n\n  handleChange = (e) => {\n    this.setState({\n        [e.target.name]: e.target.value\n    })\n  }\n\n  handleClick = (e) => {\n    e.preventDefault();\n    if(this.state.input_username.trim() === '' || this.state.input_password.trim() === '') {\n      alert(\"Please enter both a username and password.\")\n      return false\n    }\n\n\n    const json = {userName: this.state.input_username, password: this.state.input_password},\n    body = JSON.stringify(json)\n\n    fetch('/login', {\n        method:'POST',\n        body,\n        headers: {\n            \"Content-Type\":\"application/json\"\n        }\n    })\n    .then((res) =>{\n      if(res.status === 200 || res.status === 206) {\n        // make visible\n        this.props.loginCallback()\n\n      }\n      else {\n        alert(\"Password incorrect,  please try again.\")\n      }})\n\n  }\n\n  \n\n  render() {\n    return(\n      <div>\n        <h1>Login - Ray's Initiative Tracker</h1>\n        <p>\n          If you try to login without an account, one will be created for you on initial login.\n        </p>\n        <p>\n            (*Please do not use personal passwords, they are stored as plaintext*)\n        </p>\n        <form class=\"loginElements\">\n          <input type='text' name='input_username' placeholder='Username' onChange={e => this.handleChange(e)} />\n          <input type='password' name='input_password' placeholder='Password' onChange={e => this.handleChange(e)} />\n          <button id='loginBtn' onClick={e => this.handleClick(e)}>Login</button>\n        </form>\n      </div>\n    )\n  }\n\n\n\n\n}\n\n\nclass Creature extends React.Component {\n\n  moveCreature = (e, dir) => {\n    e.preventDefault();\n    const id = e.target.getAttribute(\"id\");\n    const order = e.target.getAttribute(\"order\")\n\n    const json = {movedir: dir, id, order},\n        body = JSON.stringify(json);\n\n        fetch('/move', {\n            method:'POST',\n            body,\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n        .then(response => response.json())\n        .then( resjson => this.props.getAllCallback(resjson))\n  }\n\n  removeCreature = (e) => {\n    e.preventDefault();\n    //console.log(\"Delete\")\n    const _id = this.props._id;\n    const order = this.props.order;\n\n    const json = {delete: 'delete', _id, order},\n    body = JSON.stringify(json);\n\n    fetch('/remove', {\n        method:'POST',\n        body,\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    })\n    .then( response => response.json() )\n    .then(json => this.props.getAllCallback(json))\n  }\n\n  handleClick = (e) => {\n    e.preventDefault()\n    //console.log(\"click\")\n    if(e.target && e.target.classList.contains(\"delete\")) {\n      this.removeCreature(e)\n\n    }\n    if(e.target && e.target.classList.contains(\"moveUp\")) {\n      this.moveCreature(e, -1)\n      \n    }\n    if(e.target && e.target.classList.contains(\"moveDown\")) {\n      this.moveCreature(e, 1)\n\n    }\n      \n  }\n  render() {\n    return(\n\n      <tr>\n        <td>{this.props._id}</td>\n        <td>{this.props.order}</td>\n        <td>{this.props.name}</td>\n        <td>{this.props.num}</td>\n        <td>{this.props.hp}</td>\n        <td>{this.props.ac}</td>\n        <td><FontAwesome className=\"moveDown fas fa-angle-double-up\" id={this.props._id} \n        order={this.props.order} onClick={e => this.handleClick(e)} /></td>\n        <td><FontAwesome className=\"moveUp fas fa-angle-double-down\" id={this.props._id} \n        order={this.props.order} onClick={e => this.handleClick(e)} /></td>\n        <td><FontAwesome className=\"delete fas fa-trash-o\" id={this.props._id} \n        order={this.props.order} onClick={e => this.handleClick(e)} /></td>\n      </tr>\n    )\n  }\n}\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super( props)\n    this.checkbox = React.createRef();\n    this.initbonusBox = React.createRef();\n    this.initiativeBox = React.createRef();\n    this.appBox = React.createRef();\n    this.loginBox = React.createRef();\n    this.state = {\n      creatures: [],\n      input_name: '',\n      input_hp: 0,\n      input_ac: 0,\n      input_initiative: 0,\n      input_should_roll: false,\n    }\n    this.load()\n  }\n\n  load = () => {\n    fetch( '/appdata', {method: 'GET', 'no-cors':true})\n    .then( response => response.json() )\n    .then( json => {\n      //console.log(json)\n      this.setState({ creatures: json})\n    })\n  }\n\n  handleChange = (e) => {\n    this.setState({\n        [e.target.name]: e.target.value\n    })\n  }\n\n  switchRoll = (e) => {\n      var bonus = this.initbonusBox.current\n      var init = this.initiativeBox.current\n      if(e.target.checked === true) {\n          init.style.display = \"none\"\n          bonus.style.display = \"block\"\n      } else {\n          bonus.style.display = \"none\"\n          init.style.display = \"block\"\n      }\n  }\n\n  updateCreatures = (newCreatures) => {\n    this.setState({\n      creatures: newCreatures\n    })\n  }\n\n\n  submit = function(e) {\n    e.preventDefault()\n\n    if(this.state.input_name === \"\" || this.state.input_ac === \"\" ||\n    this.state.input_initiative === \"\" || this.state.input_hp ===\"\"){\n        window.alert(\"Please fill in all of the fields.\")\n        return false\n    }\n\n    var init;\n    if(this.checkbox.current.checked) {\n      console.log(\"SHOULD ROLL\")\n        init = parseInt(this.state.input_initiative) + this.getRandomInt(20)\n    } else {\n      console.log(\"SHOULD NOT ROLL\")\n        init = parseInt(this.state.input_initiative)\n    }\n\n    const json = {name: this.state.input_name, num: init, \n        ac:this.state.input_ac, hp: this.state.input_hp}\n    const body = JSON.stringify( json)\n\n    fetch( '/add' , {\n        method:'POST',\n        body,\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    })\n    .then( response => response.json())\n    .then( resjson => this.processJSON(resjson))\n  }\n  processJSON = (json) => {\n    console.log(json)\n    // set state\n    this.setState({\n        input_name: '',\n        input_hp: 0,\n        input_ac: 0,\n        input_initiative: 0,\n        creatures: json\n    })\n  }\n\n  getRandomInt = (max) => {\n    return Math.floor(Math.random() * Math.floor(max)) + 1\n  }\n\n  login = () => {\n    console.log(\"Loginbox:\",this.loginBox.current)\n    console.log(\"appbox:\",this.appBox.current)\n    this.loginBox.current.style.display = \"none\";\n    this.appBox.current.style.display = \"grid\";\n    this.load()\n\n  }\n\n  render() {\n    return (\n      <div>\n        <div ref={this.loginBox} style={{diaplay: \"block\"}}>\n          <LoginForm   loginCallback={this.login} />\n        </div>\n\n      <div className=\"appcontainer\" ref={this.appBox} style={{display:\"none\"}}>\n        \n        <h1>Raymond's Initiative Tracker</h1>\n        <p id=\"note\">Note: up/down arrows are only for resolving ties.</p>\n        <form >\n          <h2>Enter New Creature</h2>\n          <label>Creature Name</label>\n          <input type=\"text\" id=\"name\" name=\"input_name\" value={this.state.input_name} onChange={e => this.handleChange(e)} /><br />\n          <label>Max Hit Points</label>\n          <input type=\"number\" id=\"hp\" name=\"input_hp\" value={this.state.input_hp} onChange={e => this.handleChange(e)} /><br />\n          <label>Armor Class</label>\n          <input type=\"number\" id=\"ac\" name=\"input_ac\" value={this.state.input_ac} onChange={e => this.handleChange(e)} /><br />\n          <label>Roll?</label>\n          <input ref={this.checkbox} type=\"checkbox\" id=\"roll\" name=\"input_should_roll\" value={this.state.input_should_roll} onClick={e => this.switchRoll(e)} onChange={e => this.handleChange(e)} />\n          <div ref={this.initbonusBox} style={{display:\"none\"}}>\n              <label>Initiative Bonus</label>\n              <input type=\"number\" id=\"initbonus\" name=\"input_initiative\" value={this.state.input_initiative} onChange={e => this.handleChange(e)} />\n              <p>ex +3, -2, 5</p>\n          </div>\n          <div ref={this.initiativeBox} style={{display:\"block\"}}>\n              <label>Initiative</label>\n              <input type=\"number\" id=\"initiative\" name=\"input_initiative\" value={this.state.input_initiative} onChange={e => this.handleChange(e)} /><br />\n              </div>\n\n          <button class=\"button\" onClick={e => this.submit(e)}>Add Creature</button>\n        </form>\n        <table>\n          <thead>\n            <tr>\n              <th>Id</th>\n              <th>Turn</th>\n              <th>Name</th>\n              <th>Initiative</th>\n              <th>HP</th>\n              <th>AC</th>\n              <th></th>\n              <th></th>\n              <th></th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.state.creatures.map( (creature, i) => <Creature _id={creature._id} \n            order={creature.order} name={creature.name} num={creature.num} hp={creature.hp} \n            ac={creature.ac} getAllCallback={this.updateCreatures} />)}\n          </tbody>\n        </table>\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}