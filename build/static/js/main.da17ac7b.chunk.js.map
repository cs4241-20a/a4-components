{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Dream","id","this","props","name","type","defaultChecked","completed","name2","onChange","e","change","onclick","target","checked","React","Component","App","state","dreams","load","fetch","then","response","json","data","setState","console","log","method","body","JSON","stringify","headers","window","location","reload","evt","value","document","getElementById","dream","oldDream","newDream","className","rel","href","onClick","add","Switch","length","map","i","key","_id","delete","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.da17ac7b.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass Dream extends React.Component {\n  // our .render() method creates a block of HTML using the .jsx format\n  render() {\n    return <li id = {this.props.id}>{this.props.name}\n      <input type=\"checkbox\" defaultChecked={this.props.completed} name2={this.props.name} onChange={ e => this.change(e) }/>\n    </li>\n  }\n\n  // call this method when the checkbox for this component is clicked\n  change(e) {\n    this.props.onclick( this.props.id, e.target.checked )\n  }\n}\n\n// main component\nclass App extends React.Component {\n  constructor( props ) {\n    super( props )\n    // initialize our state\n    this.state = { dreams:[] }\n    this.load()\n  }\n\n// load in our data from the server\nload() {\n  fetch(\"/dreams\")\n  .then(response => response.json())\n  // parse the JSON from the server\n  .then(data => {\n    this.setState({ dreams:data }) \n  });\n}\n\n  // when an Todo is deleted, send data to server\n  delete( id, completed ) {\n    console.log(id)\n    fetch( '/delete', {\n      method:'DELETE',\n      body: JSON.stringify({ id, completed }),\n      headers: { 'Content-Type': 'application/json' }\n    })\n      .then(response => response.json())\n      .then(json => {\n        console.log(json)\n        window.location.reload();\n      })\n  }\n  \n  // add a new todo list\n  add( evt ) {\n    const value = document.getElementById('add-dream').value\n    fetch( '/add', { \n      method:'POST',\n      body: JSON.stringify({ dream: value}),\n      headers: { 'Content-Type': 'application/json' }\n    })\n    .then( response => response.json() )\n    .then( json => {\n        console.log('responds dream:' + json.dream)\n        this.setState({ dream: json }) \n        window.location.reload();\n    })\n  }\n\n  Switch(evt){\n    const oldDream = document.getElementById('old-dream').value\n    const newDream = document.getElementById('new-dream').value\n    fetch('/change', {\n      method: 'PUT',\n      body: JSON.stringify({\n        id: oldDream,\n        name: newDream\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(response => response.json()\n        .then(json => {\n          document.location.reload()\n        }))\n  }\n\n  // render component HTML using JSX \n  render() {\n    return (\n      \n      <div className=\"App\">\n        <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/water.css@2/out/dark.css\"></link>\n        <h1>The Dream Database</h1>\n        <h3>Add a Dream </h3>\n        <tr>\n          <th><input id=\"add-dream\" type='text' /></th>\n          <th></th>\n          <th><button onClick={ e => this.add( e )}>add Dream</button></th>\n        </tr>\n        <h3>Change your Dream (spelling matters)</h3>\n        <tr>\n          <th><input id=\"old-dream\" type='text' /></th>\n          <th><input id=\"new-dream\" type='text' /></th>\n          <th><button onClick={ e => this.Switch( e )}>Change Dream</button></th>\n        </tr>\n     \n        <h3>Click the checkbox to remove dreams</h3>\n\n        <ul>\n          {console.log(\"Dreams: \" + this.state.dreams.length)}\n          {this.state.dreams.map( (dream,i) => <Dream key={dream._id} name={dream.dream} id = {dream._id} onclick={ this.delete } /> ) }\n       </ul> \n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}