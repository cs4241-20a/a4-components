{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavBar","class","href","MainDisplay","useState","isLoggedIn","changeLoggedIn","appData","setAppData","role","LoginOrContent","props","useEffect","fetch","method","then","response","json","userState","console","log","username","alert","parsedData","id","CompletedRuns","runs","NewRunForm","Login","totalDist","map","run","i","parseInt","distance","CompletedRunEntry","index","toFixed","type","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","onClick","body","JSON","stringify","_id","headers","status","error","message","onclick","notes","newNotes","prompt","runToSend","name","location","time","setName","setLocation","setDistance","setTime","setNotes","for","placeholder","value","onChange","e","target","min","step","rows","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.52f22edf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  if (true) {\n    return (\n      <>\n        <NavBar />\n        <MainDisplay />\n      </>\n    );\n  }\n}\n\nfunction NavBar() {\n  return (\n    <nav class=\"navbar navbar-expand-md navbar-dark fixed-top bg-dark\">\n      <a class=\"navbar-brand\" href=\"#\">Tagteam Marathon</a>\n      <ul class=\"navbar-nav mr-auto\"></ul>\n      <a class=\"btn btn-primary\" href=\"/auth/github\">Login with GitHub</a>\n    </nav>\n  );\n}\n\nfunction MainDisplay() {\n  let [isLoggedIn, changeLoggedIn] = useState(false)\n  let [appData, setAppData] = useState(null);\n\n  return (\n    <main role=\"main\">\n      <div class=\"jumbotron\">\n        <div class=\"container\">\n          <h1 class=\"display-3\">Tagteam Marathon</h1>\n          <p>Welcome to Tagteam Marathon!</p>\n          <p>\n            Tagteam Marathon is an app that helps you track how far your team has \n            run. No matter where you are or how fast you're going, you can help \n            your team run a collective marathon.\n          </p>\n        </div>\n      </div>\n      <LoginOrContent appData={appData} isLoggedIn={isLoggedIn} changeLoggedIn={changeLoggedIn} setAppData={setAppData} />\n    </main>\n  );\n}\n\nfunction LoginOrContent(props) {\n  function checkUser() {\n    fetch('/user-existence', {\n        method: 'GET',\n    })\n    .then(response => response.json())\n    .then(function( response ){\n        if(response.userState === 'false') {\n            console.log(`Created new user ${response.username}`);\n            alert(`Creating new user ${response.username}. Welcome to Tagteam Marathon!`);\n        } // If such a user already exists, exit silently\n    });\n  }\n\n  const loadData = function() {\n    fetch('/get-runs', {\n        method: 'GET',\n    })\n    .then(response => response.json())\n    .then(parsedData => {\n        if (!props.isLoggedIn){\n          props.setAppData(parsedData);\n          props.changeLoggedIn(!!parsedData);\n        }\n    });\n  }\n\n  useEffect(() => {\n    checkUser();\n    loadData();\n  })\n\n  if (!props.isLoggedIn) {\n    return (\n      <Login />\n    );\n  }\n\n  return (\n    <div class=\"container\" id=\"user-content\">\n      <CompletedRuns runs={props.appData} changeLoggedIn={props.changeLoggedIn}/>\n      <NewRunForm changeLoggedIn={props.changeLoggedIn}/>\n    </div>\n  );\n}\n\nfunction Login() {\n  return (\n    <div class=\"container\" id=\"guest-content\">\n      <h2>Welcome</h2>\n      <p>Please sign in to continue.</p>\n    </div>\n  );\n}\n\nfunction CompletedRuns(props) {\n  let totalDist = 0;\n  return (\n    <>\n      <h2>Completed Runs</h2>\n      <div class=\"table-responsive\">\n        <table class=\"table\" id=\"runs-table\">\n          <tr>\n            <th>Actions</th>\n            <th>Runner</th>\n            <th>Location</th>\n            <th>Distance (miles)</th>\n            <th>Time (minutes)</th>\n            <th>Speed (miles/hour)</th>\n          </tr>\n          { \n            props.runs.map( (run, i) => {\n              totalDist += parseInt(run.distance);\n              if (true) {\n                return ( <CompletedRunEntry run={run} index={i} changeLoggedIn={props.changeLoggedIn}/> );\n              }\n              return ( <EditableRunEntry run={run} index={i} changeLoggedIn={props.changeLoggedIn}/>);\n            })\n          }\n        </table>\n      </div>\n      <div class=\"table-responsive\">\n        <table class=\"table table-dark\">\n          <tr>\n            <th>Total Distance (miles)</th>\n            <th>Marathons Run</th> \n          </tr>\n          <tr>\n            <td>{ totalDist }</td>\n            <td>{ (totalDist / 26.2).toFixed(2) }</td>\n          </tr>\n        </table>\n      </div>\n    </>\n  );\n}\n\nfunction CompletedRunEntry(props) {\n  return (\n    <tr>\n      <td>\n        <div class=\"dropdown\">\n            <button class=\"btn btn-secondary dropdown-toggle\" type=\"button\" id=\"dropdownMenu-${i}\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                Actions\n            </button>\n            <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenu2\">\n                <button class=\"dropdown-item\" type=\"button\" onClick={\n                  () => {\n                    fetch ('/delete-run', {\n                        method: 'POST',\n                        body: JSON.stringify({id: props.run._id}),\n                        headers: {\n                            \"Content-Type\": \"application/json\"\n                        }\n                    }).then(function handleDeleteRunResponse(response) {\n                        if (response.status === 200) {  // OK\n                            console.log(`Successfully deleted run.`);\n                            props.changeLoggedIn(false);\n                        } else {\n                            console.error(`Failed to delete run.\n                            Error: ${response.message}`);\n                        }\n                    });\n                  }\n                }>Delete Run</button>\n                <button class=\"dropdown-item\" type=\"button\" onclick=\"prepareEdit(${i + 1}, '${data[i]._id}')\">Edit Run</button>\n                <button class=\"dropdown-item\" type=\"button\" onClick={\n                  () => alert(props.run.notes ? props.run.notes : 'No notes exist for this run')\n                  }>View Notes</button>\n                <button class=\"dropdown-item\" type=\"button\" onClick={\n                  () => {\n                    let newNotes = prompt(\"Edit Run Notes\", props.run.notes ? props.run.notes : \"\");\n                    if(newNotes) {\n                      let runToSend = {...props.run};\n                      runToSend.notes = newNotes;\n                      \n                      fetch('/edit-run', {\n                          method: 'POST',\n                          body: JSON.stringify({run: runToSend, id: props.run._id}),\n                          headers: {\n                              \"Content-Type\": \"application/json\"\n                          }\n                      }).then(function handleEditRunResponse(response) {\n                          if (response.status === 200) {  // OK\n                              console.log(`Successfully edited run to ${JSON.stringify(runToSend)}`);\n                              props.changeLoggedIn(false);  // Refresh the tables\n                          } else {\n                              console.error(`Failed to edit run to ${JSON.stringify(runToSend)}\n                              Error: ${response.message}`);\n                          }\n                      });\n                    }\n                  }\n                }>Edit Notes</button>\n            </div>\n        </div>\n      </td>\n      <td>{ props.run.name }</td>\n      <td>{ props.run.location }</td>\n      <td>{ props.run.distance }</td>\n      <td>{ props.run.time }</td>\n      <td>{ (props.run.distance * 60 / props.run.time).toFixed(2) }</td>\n    </tr>\n  );\n}\n\nfunction EditableRunEntry(props) {\n\n}\n\nfunction NewRunForm(props) {\n  let [name, setName] = useState(\"\");\n  let [location, setLocation] = useState(\"\");\n  let [distance, setDistance] = useState(0);\n  let [time, setTime] = useState(0);\n  let [notes, setNotes] = useState(\"\");\n\n  return (\n    <div class=\"container\">\n      <h2>New Run</h2>\n      <form id=\"new-run-form\">\n        \n        <div class=\"input-group mb-3\">\n          <div class=\"input-group-prepend\">\n            <label class=\"input-group-text\" for=\"input-name\">Your Name</label>\n          </div>\n          <input class=\"form-control\" type=\"text\" id=\"input-name\" placeholder=\"ex. Jane Doe\" value={name} onChange={(e)=>setName(e.target.value)} />\n        </div>\n        \n        <div class=\"input-group mb-3\">\n          <div class=\"input-group-prepend\">\n            <label class=\"input-group-text\" for=\"input-location\">Location</label>\n          </div>\n          <input class=\"form-control\" type=\"text\" id=\"input-location\" placeholder=\"ex. Bancroft Tower\" value={location} onChange={(e)=>setLocation(e.target.value)} />\n        </div>\n        \n        <div class=\"input-group mb-3\">\n          <div class=\"input-group-prepend\">\n            <label class=\"input-group-text\" for=\"input-distance\"> Distance </label>\n          </div>\n          <input class=\"form-control\" type=\"number\" id=\"input-distance\" placeholder=\"ex. 2.75\" min=\"0\" step=\"0.25\" value={distance} onChange={(e)=>setDistance(e.target.value)} />\n          <div class=\"input-group-append\">\n            <span class=\"input-group-text\">miles</span>\n          </div>\n        </div>\n        \n        <div class=\"input-group mb-3\">\n          <div class=\"input-group-prepend\">\n            <label class=\"input-group-text\" for=\"input-time\"> Time </label>\n          </div>\n          <input class=\"form-control\" type=\"number\" id=\"input-time\" placeholder=\"ex. 30\" min=\"0\" value={time} onChange={(e)=>setTime(e.target.value)} />\n          <div class=\"input-group-append\">\n            <span class=\"input-group-text\">minutes</span>\n          </div>\n        </div>\n\n        <div class=\"form-group\">\n          <label for=\"input-notes\">Notes</label>\n          <textarea class=\"form-control\" id=\"input-notes\" rows=\"3\" value={notes} onChange={(e)=>setNotes(e.target.value)}></textarea>\n        </div>\n        \n        <button class=\"btn btn-primary\" id=\"form-submit\" type=\"submit\" onClick={\n          () => {\n            const body = {\n                name: name,\n                location: location,\n                distance: distance,\n                time: time,\n                notes: notes,\n            };\n\n            fetch('/add-run', {\n              method: 'POST',\n              body: JSON.stringify(body),\n              headers: {\n                \"Content-Type\": \"application/json\"\n              }\n            }).then(function handleAddRunResponse(response) {\n              if (response.status === 200) {  // OK\n                console.log(`Successfully added run ${JSON.stringify(body)}`);\n                props.changeLoggedIn(false);\n              } else {\n                console.error(`Failed to add run ${JSON.stringify(body)};\n                Error: ${response.message}`);\n                debugger;\n              }\n            });\n          }\n        }>Submit Run</button>\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}